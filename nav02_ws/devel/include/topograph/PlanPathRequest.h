// Generated by gencpp from file topograph/PlanPathRequest.msg
// DO NOT EDIT!


#ifndef TOPOGRAPH_MESSAGE_PLANPATHREQUEST_H
#define TOPOGRAPH_MESSAGE_PLANPATHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace topograph
{
template <class ContainerAllocator>
struct PlanPathRequest_
{
  typedef PlanPathRequest_<ContainerAllocator> Type;

  PlanPathRequest_()
    : start_pose()
    , landmarks()  {
    }
  PlanPathRequest_(const ContainerAllocator& _alloc)
    : start_pose(_alloc)
    , landmarks(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _start_pose_type;
  _start_pose_type start_pose;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _landmarks_type;
  _landmarks_type landmarks;





  typedef boost::shared_ptr< ::topograph::PlanPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topograph::PlanPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlanPathRequest_

typedef ::topograph::PlanPathRequest_<std::allocator<void> > PlanPathRequest;

typedef boost::shared_ptr< ::topograph::PlanPathRequest > PlanPathRequestPtr;
typedef boost::shared_ptr< ::topograph::PlanPathRequest const> PlanPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topograph::PlanPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topograph::PlanPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::topograph::PlanPathRequest_<ContainerAllocator1> & lhs, const ::topograph::PlanPathRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start_pose == rhs.start_pose &&
    lhs.landmarks == rhs.landmarks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::topograph::PlanPathRequest_<ContainerAllocator1> & lhs, const ::topograph::PlanPathRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace topograph

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::topograph::PlanPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topograph::PlanPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topograph::PlanPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topograph::PlanPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topograph::PlanPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topograph::PlanPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topograph::PlanPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2fe3a90855e60e74bfd7df48377622e";
  }

  static const char* value(const ::topograph::PlanPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2fe3a90855e60e7ULL;
  static const uint64_t static_value2 = 0x4bfd7df48377622eULL;
};

template<class ContainerAllocator>
struct DataType< ::topograph::PlanPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topograph/PlanPathRequest";
  }

  static const char* value(const ::topograph::PlanPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topograph::PlanPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose start_pose  \n"
"string[] landmarks   \n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::topograph::PlanPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topograph::PlanPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_pose);
      stream.next(m.landmarks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topograph::PlanPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topograph::PlanPathRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "start_pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "landmarks: ";
    if (v.landmarks.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.landmarks.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.landmarks[i]);
    }
    if (v.landmarks.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPOGRAPH_MESSAGE_PLANPATHREQUEST_H
